pipeline {
    agent any
    environment {
        MICROSERVICE = 'frontend'
        ENVIRONMENT = ''
        BRANCH_NAME = ''
    }
    stages {
        stage('Determine Branch from Webhook') {
            steps {
                script {
                    if (env.GIT_BRANCH) {
                        BRANCH_NAME = env.GIT_BRANCH.replace('refs/heads/', '')
                    } else {
                        BRANCH_NAME = sh(
                            script: "git rev-parse --abbrev-ref HEAD",
                            returnStdout: true
                        ).trim()
                    }
                    echo "Rama detectada: ${BRANCH_NAME}"

                    if (BRANCH_NAME == 'origin/main' || BRANCH_NAME.startsWith('pr')) {
                        ENVIRONMENT = 'production'
                    } else if (BRANCH_NAME == 'origin/develop') {
                        ENVIRONMENT = 'develop'
                    } else {
                        error "Push desde rama no soportada: ${BRANCH_NAME}. No se realizar치 ninguna acci칩n."
                    }

                    echo "Entorno configurado: ${ENVIRONMENT}"
                }
            }
        }
        stage('Detectar archivos cambiados') {
            steps {
                script {
                    echo "Archivos cambiados detectados:"
                    currentBuild.changeSets.each { changeSet ->
                        changeSet.items.each { item ->
                            item.affectedFiles.each { file ->
                                echo "Archivo: ${file.path}"
            }
        }
    }
}
            }
            
        }
        stage('Ejecutar Chart de frontend') {
            when {
                expression {
                    currentBuild.changeSets.any { cs ->
                        cs.items.any { item ->
                            item.affectedFiles.any { file ->
                                file.path.endsWith('charts/chart-frontend/Chart.yaml')
                                file.path.endsWith('jenkins/subir-Chart') 
                            }
                        }
                    } && ENVIRONMENT != ''
                }
            }
            steps {
                script {
                    MICROSERVICE = 'frontend'
                    echo "Ejecutando BuildChart con entorno ${ENVIRONMENT}..."
                    build job: 'BuildChart',
                    parameters: [
                        string(name: 'MICROSERVICE', value: MICROSERVICE),
                        string(name: 'ENVIRONMENT', value: ENVIRONMENT)
                    ]
                }
            }
        }
        stage('Ejecutar Chart de backend') {
            when {
                expression {
                    currentBuild.changeSets.any { cs ->
                        cs.items.any { item ->
                            item.affectedFiles.any { file ->
                                file.path.endsWith('charts/chart-backend/Chart.yaml') 
                            }
                        }
                    } && ENVIRONMENT != ''
                }
            }
            steps {
                script {
                    MICROSERVICE = 'backend'
                    echo "Ejecutando BuildChart con entorno ${ENVIRONMENT}..."
                    build job: 'BuildChart',
                    parameters: [
                        string(name: 'MICROSERVICE', value: MICROSERVICE),
                        string(name: 'ENVIRONMENT', value: ENVIRONMENT)
                    ]
                }
            }
        }
    }
    post {
        success {
            echo "Pipeline ejecutada exitosamente en la rama ${BRANCH_NAME} con entorno ${ENVIRONMENT}."
        }
        failure {
            echo "Error en la ejecuci칩n. Revisa la configuraci칩n de la rama: ${BRANCH_NAME}."
        }
    }
}
